name: Dev Branch CI

on:
  pull_request:
    branches:
      - dev
  push:
    branches:
      - dev

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Backend 린트
    - name: Set up Python for linting
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Lint backend code
      working-directory: ./backend
      run: |
        flake8 . --count --statistics || echo "⚠️ 백엔드 린트 경고 있음"
        black --check . || echo "⚠️ 백엔드 포맷팅 필요"
        isort --check-only . || echo "⚠️ 백엔드 import 정렬 필요"
      continue-on-error: true
    
    # Frontend 린트
    - name: Set up Node.js for linting
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend dependencies for linting
      working-directory: ./frontend
      run: npm ci
    
    - name: Lint frontend code
      working-directory: ./frontend
      run: |
        if [ -f "package.json" ] && npm list eslint &>/dev/null; then
          npm run lint || echo "⚠️ 프론트엔드 린트 경고 있음"
        else
          echo "⚠️ ESLint 설정되지 않음"
        fi
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run backend security scan
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
        safety check || echo "⚠️ 백엔드 보안 경고 있음"
        bandit -r . -f json || echo "⚠️ 백엔드 보안 스캔 경고"
      continue-on-error: true
    
    - name: Run frontend security scan
      working-directory: ./frontend
      run: |
        if [ -f "package.json" ]; then
          npx audit-ci --moderate || echo "⚠️ 프론트엔드 보안 경고 있음"
        fi
      continue-on-error: true

  build-test:
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build with docker-compose
      run: |
        cd deployment
        docker-compose -f docker-compose.dev.yml build
    
    - name: Test containers startup
      run: |
        cd deployment
        docker-compose -f docker-compose.dev.yml up -d
        sleep 30
        docker-compose -f docker-compose.dev.yml ps
        docker-compose -f docker-compose.dev.yml down