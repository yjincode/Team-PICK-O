# Docker Compose 설정 (v3.8 삭제)

services:
  # Frontend (React + Nginx)
  frontend:
    image: ${FRONTEND_IMAGE:-nginx:alpine}
    container_name: teamPicko-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend (Django)
  backend:
    image: ${BACKEND_IMAGE:-python:3.11-slim}
    container_name: teamPicko-backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # 데이터베이스 설정 (Secrets에서 주입)
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@database:5432/teamPicko}
      - POSTGRES_DB=${POSTGRES_DB:-teamPicko}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      
      # 애플리케이션 설정 (Secrets에서 주입)
      - SECRET_KEY=${SECRET_KEY:-django-insecure-default-key-change-in-production}
      - DEBUG=${DEBUG:-False}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - PROJECT_NAME=${PROJECT_NAME:-Team-PICK-O Backend}
      
      # CORS 설정
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-["http://localhost:3000","http://127.0.0.1:3000"]}
      
      # AWS 설정 (Secrets에서 주입)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME:-}
      - AWS_REGION=${AWS_REGION:-ap-northeast-2}
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - backend-static:/app/static
      - backend-logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Database (PostgreSQL)
  database:
    image: postgres:15-alpine
    container_name: teamPicko-database
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-teamPicko}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backup:/backup
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s


  # Nginx (Reverse Proxy) - 선택사항
  nginx:
    image: nginx:alpine
    container_name: teamPicko-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - backend-static:/var/www/static:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:
    name: teamPicko-postgres-data
  backend-static:
    name: teamPicko-backend-static
  backend-logs:
    name: teamPicko-backend-logs
  nginx-logs:
    name: teamPicko-nginx-logs
