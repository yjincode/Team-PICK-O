version: '3.8'

services:
  # Frontend (React + Nginx)
  frontend:
    image: ${FRONTEND_IMAGE:-nginx:alpine}
    container_name: teamPicko-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend (FastAPI)
  backend:
    image: ${BACKEND_IMAGE:-python:3.11-slim}
    container_name: teamPicko-backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # 데이터베이스 설정
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
      # 애플리케이션 설정
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-False}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost}
      - PROJECT_NAME=${PROJECT_NAME:-Team-PICK-O Backend}
      
      # CORS 설정
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-["http://localhost:3000"]}
      
      # Redis 설정 (선택사항)
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      
      # 외부 서비스 설정
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME:-}
      - AWS_REGION=${AWS_REGION:-ap-northeast-2}
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - backend-static:/app/static
      - backend-logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Database (PostgreSQL)
  database:
    image: postgres:15-alpine
    container_name: teamPicko-database
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backup:/backup
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis (캐시 및 세션 저장소)
  # redis:
  #   image: redis:7-alpine
  #   container_name: teamPicko-redis
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   volumes:
  #     - redis-data:/data
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}

  # Nginx (Reverse Proxy) - 선택사항
  nginx:
    image: nginx:alpine
    container_name: teamPicko-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - backend-static:/var/www/static:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:
    name: teamPicko-postgres-data
  redis-data:
    name: teamPicko-redis-data
  backend-static:
    name: teamPicko-backend-static
  backend-logs:
    name: teamPicko-backend-logs
  nginx-logs:
    name: teamPicko-nginx-logs
